/* Lugosi.java */
/* Generated By:JavaCC: Do not edit this line. Lugosi.java */
import java.io.*;
import java.util.*;
// importar as classes da árvore sintática:
import ast.*;

public class Lugosi implements LugosiConstants {
  public static void main(String args[]) throws Exception{
  // abrir o arquivo passado por linha
  // de comando contento o código em Lugosi:

  FileInputStream fs = new FileInputStream(new File(args[0]));
  // Instanciar o parser da linguagem Lugosi passando
  // como argumento o arquivo contendo o código
  //Lugosi a ser processado:

  Lugosi parser = new Lugosi(fs);
  // Chamar a primeira regra do parser que irá
  // analisar o código e devolver a árvore sintática

  Prog arvore = parser.LUGOSI();

  // passar a árvore para o gerador de código
  // que deve gerar um arquivo com com o código
  // alvo na linguagem escolhida:
  GeraCodigo.gerar(arvore);
  }

/// LUGOSI -> MAIN FUNC?
  static final public Prog LUGOSI() throws ParseException {Main main;
    ArrayList<Fun> fun = new ArrayList<Fun>();
    main = MAIN();
    fun = FUNC();
{if ("" != null) return new Prog(main, fun);}
    throw new Error("Missing return statement in function");
}

/// MAIN -> "void" "main" "{" VARDECL SEQCOMANDOS "}"
  static final public Main MAIN() throws ParseException {ArrayList<VarDecl> vars = new ArrayList<VarDecl>();
    ArrayList<Comando> coms = new ArrayList<Comando>();
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(ACHAVES);
    vars = VARDECL();
    coms = SEQCOMANDOS();
    jj_consume_token(FCHAVES);
{if ("" != null) return new Main(vars, coms);}
    throw new Error("Missing return statement in function");
}

/// VARDECL -> VARDECL "let" TIPO TOKEN_id ";" | vazio
/// TBM É UM ARRAY
  static final public ArrayList<VarDecl> VARDECL() throws ParseException {ArrayList<VarDecl> vars = new ArrayList<VarDecl>();
    String type;
    String var;
    ArrayList<VarDecl> moreVars;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LET:{
      jj_consume_token(LET);
      type = TIPO();
      var = jj_consume_token(ID).image;
      jj_consume_token(PONTOEVIRGULA);
vars.add(new VarDecl(type, var)); moreVars = VARDECL(); vars.addAll(moreVars);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
{if ("" != null) return vars;}
    throw new Error("Missing return statement in function");
}

///TIPO -> "float" | "bool" | "void"
  static final public String TIPO() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FLOAT:{
      t = jj_consume_token(FLOAT);
{if ("" != null) return t.image;}
      break;
      }
    case BOOL:{
      t = jj_consume_token(BOOL);
{if ("" != null) return t.image;}
      break;
      }
    case VOID:{
      t = jj_consume_token(VOID);
{if ("" != null) return t.image;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/// SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
/// PRECISA SER ARRAY PRA GUARDAR A SEQUENCIA!!!
// Chama ele mesmo recursivamente até n ter comandos
  static final public ArrayList<Comando> SEQCOMANDOS() throws ParseException {ArrayList<Comando> coms = new ArrayList<Comando>();
    Comando com;
    ArrayList<Comando> moreComs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:
    case WHILE:
    case RETURN:
    case PRINTIO:
    case ID:{
      com = COMANDO();
coms.add(com); moreComs = SEQCOMANDOS(); coms.addAll(moreComs);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
{if ("" != null) return coms;}
    throw new Error("Missing return statement in function");
}

  static final public Exp FATOR() throws ParseException {Token t;
    ArrayList<Exp> args;
    String fun;
    if (jj_2_1(2)) {
      t = jj_consume_token(ID);
      jj_consume_token(APARENTESES);
      args = LISTAEXP();
      jj_consume_token(FPARENTESES);
{if ("" != null) return new EChamadaFun(t.image, args);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        t = jj_consume_token(ID);
{if ("" != null) return new EVar(t.image);}
        break;
        }
      case NUM:{
        t = jj_consume_token(NUM);
{if ("" != null) return new EFloat(Float.parseFloat(t.image));}
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
{if ("" != null) return new ETrue();}
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
{if ("" != null) return new EFalse();}
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
}

/// OP -> "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "=="
  static final public String OP() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SOMA:{
      t = jj_consume_token(SOMA);
{if ("" != null) return t.image;}
      break;
      }
    case SUB:{
      t = jj_consume_token(SUB);
{if ("" != null) return t.image;}
      break;
      }
    case MULT:{
      t = jj_consume_token(MULT);
{if ("" != null) return t.image;}
      break;
      }
    case DIV:{
      t = jj_consume_token(DIV);
{if ("" != null) return t.image;}
      break;
      }
    case AND:{
      t = jj_consume_token(AND);
{if ("" != null) return t.image;}
      break;
      }
    case OR:{
      t = jj_consume_token(OR);
{if ("" != null) return t.image;}
      break;
      }
    case MENOR:{
      t = jj_consume_token(MENOR);
{if ("" != null) return t.image;}
      break;
      }
    case MAIOR:{
      t = jj_consume_token(MAIOR);
{if ("" != null) return t.image;}
      break;
      }
    case IGUAL:{
      t = jj_consume_token(IGUAL);
{if ("" != null) return t.image;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

/// LISTAEXP -> EXP | LISTAEXP "," EXP
/// ISSO TEM QUE RETORNAR UM ARRAY!!!!
  static final public ArrayList<Exp> LISTAEXP() throws ParseException {ArrayList<Exp> exps = new ArrayList<Exp>();
    Exp e;
    e = EXP();
exps.add(e);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
      jj_consume_token(VIRGULA);
      e = EXP();
exps.add(e);
    }
{if ("" != null) return exps;}
    throw new Error("Missing return statement in function");
}

// FUNC -> FUNC "def" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// | "def" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
  static final public ArrayList<Fun> FUNC() throws ParseException {ArrayList<Fun> fun = new ArrayList<Fun>();
    String nome; ArrayList<ParamFormalFun> params;
    String retorno;
    ArrayList<VarDecl> vars;
    ArrayList<Comando> body;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEF:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(DEF);
      retorno = TIPO();
      nome = jj_consume_token(ID).image;
      jj_consume_token(APARENTESES);
      params = LISTAARG();
      jj_consume_token(FPARENTESES);
      jj_consume_token(ACHAVES);
      vars = VARDECL();
      body = SEQCOMANDOS();
      jj_consume_token(FCHAVES);
fun.add(new Fun(nome, params, retorno, vars, body));
    }
{if ("" != null) return fun;}
    throw new Error("Missing return statement in function");
}

// LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id
// dúvida no tipo mas acho que é isso
  static final public ArrayList<ParamFormalFun> LISTAARG() throws ParseException {ArrayList<ParamFormalFun> params = new ArrayList<ParamFormalFun>();
    String type;
    String var;
    type = TIPO();
    var = jj_consume_token(ID).image;
params.add(new ParamFormalFun(type, var));
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(VIRGULA);
      type = TIPO();
      var = jj_consume_token(ID).image;
params.add(new ParamFormalFun(type, var));
    }
{if ("" != null) return params;}
    throw new Error("Missing return statement in function");
}

/// EXP -> "(" EXP OP EXP ")" | FATOR
  static final public Exp EXP() throws ParseException {Exp arg1;
    String op;
    Exp arg2;
    Exp fator;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case APARENTESES:{
      jj_consume_token(APARENTESES);
      arg1 = EXP();
      op = OP();
      arg2 = EXP();
      jj_consume_token(FPARENTESES);
{if ("" != null) return new EOpExp(op, arg1, arg2);}
      break;
      }
    case TRUE:
    case FALSE:
    case NUM:
    case ID:{
      fator = FATOR();
{if ("" != null) return fator;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Comando COMANDO() throws ParseException {Token t;
    Exp exp;
    ArrayList<Comando> coms = new ArrayList<Comando>();
    ArrayList<Exp> args;
    if (jj_2_2(3)) {
      t = jj_consume_token(ID);
      jj_consume_token(ATR);
      exp = EXP();
      jj_consume_token(PONTOEVIRGULA);
{if ("" != null) return new CAtribuicao(t.beginLine, t.image, exp);}
    } else if (jj_2_3(2)) {
      t = jj_consume_token(ID);
      jj_consume_token(APARENTESES);
      args = LISTAEXP();
      jj_consume_token(FPARENTESES);
      jj_consume_token(PONTOEVIRGULA);
{if ("" != null) return new CChamadaFun(t.beginLine, t.image, args);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        t = jj_consume_token(IF);
        exp = EXP();
        jj_consume_token(ACHAVES);
        coms = SEQCOMANDOS();
        jj_consume_token(FCHAVES);
        jj_consume_token(PONTOEVIRGULA);
{if ("" != null) return new CIf(t.beginLine, exp, coms);}
        break;
        }
      case WHILE:{
        t = jj_consume_token(WHILE);
        exp = EXP();
        jj_consume_token(DO);
        jj_consume_token(ACHAVES);
        coms = SEQCOMANDOS();
        jj_consume_token(FCHAVES);
        jj_consume_token(PONTOEVIRGULA);
{if ("" != null) return new CWhile(t.beginLine, exp, coms);}
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        if (jj_2_4(3)) {
          t = jj_consume_token(ID);
          jj_consume_token(ATR);
          jj_consume_token(READIO);
          jj_consume_token(APARENTESES);
          jj_consume_token(FPARENTESES);
{if ("" != null) return new CReadInput(t.beginLine, t.image);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RETURN:{
            t = jj_consume_token(RETURN);
            exp = EXP();
            jj_consume_token(PONTOEVIRGULA);
{if ("" != null) return new CReturn(t.beginLine, exp);}
            break;
            }
          case PRINTIO:{
            t = jj_consume_token(PRINTIO);
            exp = EXP();
            jj_consume_token(PONTOEVIRGULA);
{if ("" != null) return new CPrint(t.beginLine, exp);}
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(APARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_FATOR_155_5_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_FATOR_156_7_8()) {
    jj_scanpos = xsp;
    if (jj_3R_FATOR_157_7_9()) {
    jj_scanpos = xsp;
    if (jj_3R_FATOR_158_7_10()) {
    jj_scanpos = xsp;
    if (jj_3R_FATOR_159_7_11()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(APARENTESES)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ATR)) return true;
    if (jj_3R_EXP_230_5_4()) return true;
    return false;
  }

  static private boolean jj_3R_EXP_231_7_6()
 {
    if (jj_3R_FATOR_155_5_7()) return true;
    return false;
  }

  static private boolean jj_3R_FATOR_159_7_11()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_EXP_230_5_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_EXP_230_5_5()) {
    jj_scanpos = xsp;
    if (jj_3R_EXP_231_7_6()) return true;
    }
    return false;
  }

  static private boolean jj_3R_EXP_230_5_5()
 {
    if (jj_scan_token(APARENTESES)) return true;
    return false;
  }

  static private boolean jj_3R_FATOR_158_7_10()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_FATOR_157_7_9()
 {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_FATOR_156_7_8()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ATR)) return true;
    if (jj_scan_token(READIO)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LugosiTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x1000,0xc040,0xd80,0xc00000,0xfc000000,0x200000,0x2000,0x200000,0xc80000,0x180,0xc00,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x10,0x18,0x7,0x0,0x0,0x0,0x18,0x0,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Lugosi(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lugosi(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LugosiTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Lugosi(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LugosiTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LugosiTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Lugosi(LugosiTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LugosiTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 11; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[37];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 11; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 37; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 4; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

  // public static void geraCodigo(ArvoreLugosi prog, String arquivo){
  //   //a
  // }
}
