PARSER_BEGIN(Lugosi)
import java.io.*;
// importar as classes da árvore sintática:
import ast.*;

public class Lugosi {
  public static void main(String args[]) throws Exception{
  // abrir o arquivo passado por linha
  // de comando contento o código em Lugosi:

  FileInputStream fs = new FileInputStream(new File(args[0]));
  // Instanciar o parser da linguagem Lugosi passando
  // como argumento o arquivo contendo o código
  //Lugosi a ser processado:

  Lugosi parser = new Lugosi(fs);
  // Chamar a primeira regra do parser que irá
  // analisar o código e devolver a árvore sintática

  Prog arvore = parser.Lugosi();
  // passar a árvore para o gerador de código
  // que deve gerar um arquivo com com o código
  // alvo na linguagem escolhida:
  geraCodigo(arvore, args[0])
  }
  // public static void geraCodigo(ArvoreLugosi prog, String arquivo){
  //   //a
  // }
}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <VOID: "void">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <RETURN: "return">
| <PRINTIO: "printIO">
| <LET: "let">
| <DEF: "def">
| <FLOAT: "float">
| <BOOL: "bool">
| <READIO: "readIO">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <VIRGULA: ",">
| <TRUE: "true">
| <FALSE: "false">
| <PONTOEVIRGULA: ";">
| <ATR: ":=">
| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&&">
| <OR: "||">
| <MENOR: "<">
| <MAIOR: ">">
| <IGUAL: "==">
}

TOKEN :
{
  <NUM : (["0"-"9"])+(["."]["0"-"9"])+>
| <ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>
}

/// LUGOSI -> MAIN FUNC?
Prog Lugosi () :
{Main main = null; ArrayList<Fun> ListaFun = new ArrayList <Fun> (); Token fun = NULL}
{
  (main = main() (fun = Func())* <EOF> {ListaFun.add(fun);})
  {return new Prog(main, ListaFun);}
  
}

/// MAIN -> "void" "main" "{" VARDECL SEQCOMANDOS "}"
Main main () :
{ArrayList<VarDecl> ListaVars = new ArrayList <VarDecl> (); ArrayList<Comando> ListaComs = new ArrayList <Comando> ();
Token var = NULL; Token com = NULL;}
{
  (<VOID> <MAIN> <ACHAVES> var=VarDecl() com=SeqComandos() <FCHAVES>{} {ListaVars.add(var); ListaComs.add(com);})
  { return new Main(ListaVars, ListaComs); }

}

/// VARDECL -> VARDECL "let" TIPO TOKEN_id ";" | vazio
/// TBM É UM ARRAY
ArrayList <VarDecl> VarDecl () :
{Token type = null; 
Token var = null; 
ArrayList <VarDecl> vars = new ArrayList <VarDecl> ();}
{
  (<LET> type=Tipo() var=<ID> <PONTOEVIRGULA> {vars.add(new VarDecl(type.image, var.image));)*  {return vars;}
}

///TIPO -> "float" | "bool" | "void"
String Tipo () :
{Token t = null;}
{
  t=<FLOAT> {return t.image;}| t=<BOOL> {return t.image;}| t=<VOID> {return t.image;}
}

/// SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
/// PRECISA SER ARRAY PRA GUARDAR A SEQUENCIA!!!
ArrayList <Comando> SeqComandos () :
{ArrayList <Comando> comandos = new ArrayList <Comando> (); Comando c;}
{
  (c=Comando() {comandos.add(c)})* {return comandos;}
}


// FATOR -> TOKEN_id | TOKEN_id "(" LISTAEXP? ")"
// | TOKEN_numliteral | "true" | "false"
Exp Fator () :
{Token t = null;Exp result=null; ArrayList <Exp> listaExp = new ArrayList <Exp> ();}
{
  t=<ID> (
        <APARENTESES> listaExp=ListaExp() <FPARENTESES> {result= EChamadaFun(t.image, listaExp)}
        |
        {result= EVar(t.image)}
        )
  | t=<NUM> {result = EFloat(t.image)} | t=<TRUE> {result = ETrue(t.image)} | t=<FALSE> {result = EFalse(t.image)}
  {return result;} 
}


/// OP -> "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "=="
String OP () :
{Token t = null; String result = null;}
{
  t=<SOMA> {result = t.image} 
  | t=<SUB> {result = t.image} 
  | t=<MULT> {result = t.image}
  | t=<DIV> {result = t.image}
  | t=<AND> {result = t.image}
  | t=<OR> {result = t.image}
  | t=<MENOR> {result = t.image}
  | t=<MAIOR> {result = t.image}
  | t=<IGUAL> {result = t.image}
  {return result;}
}

/// LISTAEXP -> EXP | LISTAEXP "," EXP
/// ISSO TEM QUE RETORNAR UM ARRAY!!!!
ArrayList <Exp> ListaExp () :
{Exp exp; ArrayList <Exp> listaExp = new ArrayList <Exp> ();}
{
  exp=Exp() {listaExp.add(exp);} (<VIRGULA> exp=Exp() {listaExp.add(exp);})*
  {return listaExp;}
}


// FUNC -> FUNC "def" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// | "def" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"

Fun Func () :
{ArrayList<VarDecl> ListaVar = new ArrayList <VarDecl> (); 
ArrayList<Comando> ListaComandos = new ArrayList <Comando> ();
ArrayList<ParamFormalFun> ListaParams = new ArrayList <ParamFormalFun> ();
Token nome = null;
String retorno = null; }
{
  (<DEF> retorno=Tipo() nome=<ID> <APARENTESES> ListaParams=ListaArg() <FPARENTESES> <ACHAVES> ListaVar=VarDecl() ListaComandos=SeqComandos() <FCHAVES>)*
  {return new Fun(nome.image, ListaParams, retorno, ListaVar, ListaComandos);}
}

// LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id
// dúvida no tipo mas acho que é isso
ArrayList<ParamFormalFun> ListaArg () :
{Token tipo = NULL; Token var = NULL;
ArrayList<String> listaTipos = new ArrayList <String> ();
ArrayList<String> listaVars = new ArrayList <String> ();}
{
  (tipo=Tipo() var=<ID> {listaTipos.add(tipo.image);listaVars.add(var.image);} (<VIRGULA> tipo=Tipo() var=<ID> {listaTipos.add(tipo.image);listaVars.add(var.image);})*)
  {return new ParamFormalFun(listaTipos, listaVars)}
}


/// EXP -> "(" EXP OP EXP ")" | FATOR
Exp Exp () :
{ Token op = null; Exp arg1 = null, arg2 = null; }
{
  (arg1 = Fator()
  | op = OP() arg2 = Fator() { return new EOpExp(op.image, arg1, arg2); }
  )*
} 

/// Não sei se isso tá certo!!!! 

// Exp Exp () :
// { Exp result = null;}
// {
//   result = Fator()
//   (
//     | <APARENTESES> args = ListaExp() <FPARENTESES> { result = new EChamadaFun(result.getName(), args); }
//   )
  
//   {return result;}
// } 

/// COMANDO -> TOKEN_id ":=" EXP ";"
// | TOKEN_id "(" LISTAEXP? ")" ";"
// | "if" EXP "{" SEQCOMANDOS "}" ";"
// | "while" EXP "do" "{" SEQCOMANDOS "}" ";"
// | TOKEN_id ":=" "readIO" "(" ")"
// | "return" EXP ";"
// | "printIO" EXP ";"
// AJUSTAR SeqComandos() PQ AGORA ELE RECEBE UM ARRAY!!
Comando Comando () :
{Comando resp=null; Exp exp = null;
ArrayList<Comando> ListaComandos = new ArrayList <Comando> ();}
{
  <ID> ComandoL() 
  | 
  <IF> exp = Exp() <ACHAVES> ListaComandos=SeqComandos() <FCHAVES> <PONTOEVIRGULA>{ resp = new CIf(getToken(1).beginLine, exp, ListaComandos); }
  | 
  <WHILE> exp = Exp() <DO> <ACHAVES> ListaComandos=SeqComandos() <FCHAVES> <PONTOEVIRGULA> { resp = new CWhile(getToken(1).beginLine, exp, ListaComandos); }
  | 
  <RETURN> exp = Exp() <PONTOEVIRGULA> { resp = new CReturn(getToken(1).beginLine, exp); }
  | 
  <PRINTIO> exp = Exp() <PONTOEVIRGULA> { resp = new CPrint(getToken(1).beginLine, exp); }

  {return resp;}
}

void ComandoL () :
{Token id; Exp exp = null; 
ArrayList <Exp> listaExp = new ArrayList <Exp> ();}
{
  /// existem três casos para ID:
  /// TOKEN_id ":=" EXP ";"
  /// TOKEN_id ":=" "readIO" "(" ")"
  /// TOKEN_id "(" LISTAEXP? ")" ";"
  id =<ID> <ATR> 
    (
        exp = Exp() { return new CAtribuicao(id.beginLine, id.image, exp); }
        |
        <READIO> <APARENTESES> <FPARENTESES> { return new CReadInput(id.beginLine, id.image); }
    ) <PONTOEVIRGULA>
    |
    id =<ID> <APARENTESES> listaExp = ListaExp() <FPARENTESES> <PONTOEVIRGULA>
    { return new CChamadaFun(id.beginLine, id.image, listaExp); }
}

/// isso aqui parece muito esquisito KKKKKKKK 

CWhile CWhile () :
{Token linha = null; Exp exp = null; ArrayList<Comando> bloco = new ArrayList<>(); }
{
  linha = <NUM> exp = Exp() <ACHAVES> bloco = SeqComandos() <FCHAVES>
  {return new CWhile(Integer.parseInt(linha.image), exp, bloco)}
}

CAtribuicao CAtribuicao () :
{ Token linha = null; Token var = null; Exp exp = null; }
{
  linha = <NUM> var = <ID> <ATR> exp = Exp() <PONTOEVIRGULA>
  { return new CAtribuicao(Integer.parseInt(linha.image), var.image, exp); }
}

CChamadaFun CChamadaFun () :
{ Token linha = null; Token fun = null; ArrayList<Exp> args = new ArrayList<>(); }
{
  linha = <NUM> fun = <ID> <APARENTESES> args = ListaExp()? <FPARENTESES> <PONTOEVIRGULA>
  { return new CChamadaFun(Integer.parseInt(linha.image), fun.image, args); }
}

CIf CIf() :
{ Token linha = null; Exp exp = null; ArrayList<Comando> bloco = new ArrayList<>(); }
{
  linha = <NUM> <IF> exp = Exp() <ACHAVES> bloco = SeqComandos() <FCHAVES>
  { return new CIf(Integer.parseInt(linha.image), exp, bloco); }
}

CPrint CPrint() :
{ Token linha = null; Exp exp = null; }
{
  linha = <NUM> <PRINTIO> exp = Exp() <PONTOEVIRGULA>
  { return new CPrint(Integer.parseInt(linha.image), exp); }
}

CReadInput CReadInput() :
{ Token linha = null; Token var = null; }
{
  linha = <NUM> <ID> var = <ID> <ATR> <READIO> <APARENTESES> <FPARENTESES> <PONTOEVIRGULA>
  { return new CReadInput(Integer.parseInt(linha.image), var.image); }
}

CReturn CReturn() :
{ Token linha = null; Exp exp = null; }
{
  linha = <NUM> <RETURN> exp = Exp() <PONTOEVIRGULA>
  { return new CReturn(Integer.parseInt(linha.image), exp); }
}
