PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.*;
// importar as classes da árvore sintática:
import ast.*;

public class Lugosi {
  public static void main(String args[]) throws Exception{
  // abrir o arquivo passado por linha
  // de comando contento o código em Lugosi:

  FileInputStream fs = new FileInputStream(new File(args[0]));
  // Instanciar o parser da linguagem Lugosi passando
  // como argumento o arquivo contendo o código
  //Lugosi a ser processado:

  Lugosi parser = new Lugosi(fs);
  // Chamar a primeira regra do parser que irá
  // analisar o código e devolver a árvore sintática

  Prog arvore = parser.LUGOSI();

  // passar a árvore para o gerador de código
  // que deve gerar um arquivo com com o código
  // alvo na linguagem escolhida:
  GeraCodigo.gerar(arvore);
  }
  
  // public static void geraCodigo(ArvoreLugosi prog, String arquivo){
  //   //a
  // }
}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <VOID: "void">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <RETURN: "return">
| <PRINTIO: "printIO">
| <LET: "let">
| <DEF: "def">
| <FLOAT: "float">
| <BOOL: "bool">
| <READIO: "readIO">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <VIRGULA: ",">
| <TRUE: "true">
| <FALSE: "false">
| <PONTOEVIRGULA: ";">
| <ATR: ":=">
| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&&">
| <OR: "||">
| <MENOR: "<">
| <MAIOR: ">">
| <IGUAL: "==">
}

TOKEN :
{
  <NUM : (["0"-"9"])+(["."](["0"-"9"])+)? >
| <ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>
}

/// LUGOSI -> MAIN FUNC?
Prog LUGOSI() :
{ 
    Main main; 
    ArrayList<Fun> fun = new ArrayList<Fun>(); 
}
{
    main = MAIN() 
    fun = FUNC()
    { return new Prog(main, fun); }
}

/// MAIN -> "void" "main" "{" VARDECL SEQCOMANDOS "}"
Main MAIN() :
{ 
    ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); 
    ArrayList<Comando> coms = new ArrayList<Comando>(); 
}
{
    <VOID> <MAIN> <ACHAVES>
    vars = VARDECL() 
    coms = SEQCOMANDOS()    
    <FCHAVES>
    { return new Main(vars, coms); }
}

/// VARDECL -> VARDECL "let" TIPO TOKEN_id ";" | vazio
/// TBM É UM ARRAY
ArrayList<VarDecl> VARDECL() :
{ 
    ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); 
    String type; 
    String var; 
    ArrayList<VarDecl> moreVars;
}
{
    (<LET> type = TIPO() var = <ID>.image <PONTOEVIRGULA> { vars.add(new VarDecl(type, var)); moreVars = VARDECL(); vars.addAll(moreVars); })?
    { return vars; }
}

///TIPO -> "float" | "bool" | "void"
String TIPO() :
{ Token t; }
{
    t = <FLOAT> { return t.image; }
    | t = <BOOL> { return t.image; }
    | t = <VOID> { return t.image; }
}

/// SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
/// PRECISA SER ARRAY PRA GUARDAR A SEQUENCIA!!!
// Chama ele mesmo recursivamente até n ter comandos
ArrayList<Comando> SEQCOMANDOS() :
{ 
    ArrayList<Comando> coms = new ArrayList<Comando>(); 
    Comando com; 
    ArrayList<Comando> moreComs;
}
{
    (com = COMANDO() { coms.add(com); moreComs = SEQCOMANDOS(); coms.addAll(moreComs); })?
    { return coms; }
}


Exp FATOR() :
{ 
    Token t; 
    ArrayList<Exp> args; 
    String fun; 
}
{
    LOOKAHEAD(2) t = <ID> <APARENTESES> args = LISTAEXP() <FPARENTESES> { return new EChamadaFun(t.image, args); }
    | t = <ID> { return new EVar(t.image); }
    | t = <NUM> { return new EFloat(Float.parseFloat(t.image)); }
    | <TRUE> { return new ETrue(); }
    | <FALSE> { return new EFalse(); }
}

/// OP -> "+" | "-" | "*" | "/" | "&&" | "||" | "<" | ">" | "=="
String OP() :
{ 
    Token t; 
}
{
    t = <SOMA> { return t.image; }
    | t = <SUB> { return t.image; }
    | t = <MULT> { return t.image; }
    | t = <DIV> { return t.image; }
    | t = <AND> { return t.image; }
    | t = <OR> { return t.image; }
    | t = <MENOR> { return t.image; }
    | t = <MAIOR> { return t.image; }
    | t = <IGUAL> { return t.image; }
}

/// LISTAEXP -> EXP | LISTAEXP "," EXP
/// ISSO TEM QUE RETORNAR UM ARRAY!!!!
ArrayList<Exp> LISTAEXP() :
{ 
    ArrayList<Exp> exps = new ArrayList<Exp>(); 
    Exp e; 
}
{
    e = EXP() { exps.add(e); } (<VIRGULA> e = EXP() { exps.add(e); })*
    { return exps; }
}


// FUNC -> FUNC "def" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// | "def" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
ArrayList<Fun> FUNC() :
{ 
    ArrayList<Fun> fun = new ArrayList<Fun>(); 
    String nome; ArrayList<ParamFormalFun> params; 
    String retorno; 
    ArrayList<VarDecl> vars; 
    ArrayList<Comando> body; 
}
{
    (<DEF> retorno = TIPO() nome = <ID>.image "(" params = LISTAARG() ")" "{" vars = VARDECL() body = SEQCOMANDOS() "}" { fun.add(new Fun(nome, params, retorno, vars, body)); })*
    { return fun; }
}

// LISTAARG -> TIPO TOKEN_id | LISTAARG "," TIPO TOKEN_id
// dúvida no tipo mas acho que é isso
ArrayList<ParamFormalFun> LISTAARG() :
{ 
    ArrayList<ParamFormalFun> params = new ArrayList<ParamFormalFun>(); 
    String type; 
    String var; 
}
{
    type = TIPO() var = <ID>.image { params.add(new ParamFormalFun(type, var)); } ("," type = TIPO() var = <ID>.image { params.add(new ParamFormalFun(type, var)); })*
    { return params; }
}


/// EXP -> "(" EXP OP EXP ")" | FATOR
Exp EXP() :
{ 
    Exp arg1; 
    String op; 
    Exp arg2;
    Exp fator;
}
{
    "(" arg1 = EXP() op = OP() arg2 = EXP() ")" { return new EOpExp(op, arg1, arg2); }
    | fator = FATOR() { return fator; }
}

Comando COMANDO() :
{ 
    Token t; 
    Exp exp; 
    ArrayList<Comando> coms = new ArrayList<Comando>(); 
    ArrayList<Exp> args; 
}
{
    LOOKAHEAD(3) t = <ID> <ATR> exp = EXP() <PONTOEVIRGULA> { return new CAtribuicao(t.beginLine, t.image, exp); }
    | LOOKAHEAD(2) t = <ID> <APARENTESES> args = LISTAEXP() <FPARENTESES> <PONTOEVIRGULA> { return new CChamadaFun(t.beginLine, t.image, args); }
    | t = <IF> exp = EXP() <ACHAVES> coms = SEQCOMANDOS() <FCHAVES> <PONTOEVIRGULA> { return new CIf(t.beginLine, exp, coms); }
    | t = <WHILE> exp = EXP() <DO> <ACHAVES> coms = SEQCOMANDOS() <FCHAVES> <PONTOEVIRGULA> { return new CWhile(t.beginLine, exp, coms); }
    | LOOKAHEAD(3) t = <ID> <ATR> <READIO> <APARENTESES> <FPARENTESES> { return new CReadInput(t.beginLine, t.image); }
    | t = <RETURN> exp = EXP() <PONTOEVIRGULA> { return new CReturn(t.beginLine, exp); }
    | t = <PRINTIO> exp = EXP() <PONTOEVIRGULA> { return new CPrint(t.beginLine, exp); }
}

